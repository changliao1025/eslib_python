import os, sys
from datetime import datetime
import numpy as np
import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.ticker as ticker
from mpl_toolkits.axes_grid1 import ImageGrid
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()
from statsmodels.tsa.seasonal import STL

sSystem_paths = os.environ['PATH'].split(os.pathsep)
sys.path.extend(sSystem_paths)
from pyes.system.define_global_variables import *

from pyes.visual.color.create_diverge_rgb_color_hex import create_diverge_rgb_color_hex

def plot_time_series_analysis(aTime, \
    aData, \
                          sFilename_out,\
                          iDPI_in = None,\
                          aFlag_trend_in = None, \
                          iReverse_y_in = None, \
                          iSize_x_in = None, \
                          iSize_y_in = None, \
                          dMax_x_in = None, \
                          dMin_x_in = None, \
                          dMax_y_in = None, \
                          dMin_y_in = None, \
                              dSpace_x_in = None,\
                          dSpace_y_in = None,\
                          aMarker_in = None,\
                          aColor_in = None,\
                          aLinestyle_in = None,\
                              sLabel_x_in = None, \
                          sLabel_y_in = None, \
                          aLabel_legend_in = None,\
                          sDate_type_in = None,\
                          sFormat_y_in =None,\
                          sTitle_in = None):
    #find how many data will be plotted


    if iDPI_in is not None:
        iDPI = iDPI_in
    else:
        iDPI = 300

   

    if iReverse_y_in is not None:
        iReverse_y = iReverse_y_in
    else:
        iReverse_y = 0

    if iSize_x_in is not None:
        iSize_x = iSize_x_in
    else:
        iSize_x = 12

    if iSize_y_in is not None:
        iSize_y = iSize_y_in
    else:
        iSize_y = 9

    if sLabel_y_in is not None:
        sLabel_y = sLabel_y_in
    else:
        sLabel_y = ''

    nData = 4
    if aLabel_legend_in is not None:
        aLabel_legend = aLabel_legend_in
    else:
        aLabel_legend = np.full(nData,'')

    if sTitle_in is not None:
        sTitle = sTitle_in
    else:
        sTitle = ''

    if aMarker_in is not None:
        aMarker = aMarker_in
    else:
        aMarker=np.full(nData, '+')

    if aColor_in is not None:
        aColor = aColor_in
    else:
        if(nData>=3):
            aColor= create_diverge_rgb_color_hex(nData)
        else:
            if nData==2:
                aColor= ['red','blue']
            else:
                aColor=['red']

    if aLinestyle_in is not None:
        aLinestyle = aLinestyle_in
    else:
        aLinestyle = np.full(nData, '-')

    if dMax_x_in is not None:
        dMax_x = dMax_x_in
    else:
        dMax_x = np.datetime64(np.nanmax(aTime), 'Y')
    if dMin_x_in is not None:
        dMin_x = dMin_x_in
    else:
        dMin_x = np.datetime64(np.nanmin(aTime), 'Y')

    if dMax_y_in is not None:
        dMax_y = dMax_y_in
    else:
        dMax_y = np.nanmax(aData_all) * 1.0
    if dMin_y_in is not None:
        dMin_y = dMin_y_in
    else:
        dMin_y = np.nanmin(aData_all) #if it has negative value, change here
    if (dMax_y <= dMin_y ):
        return

    if dSpace_y_in is not None:
        iFlag_space_y =1
        dSpace_y = dSpace_y_in
    else:
        iFlag_space_y=0
        pass

    fig = plt.figure( dpi=iDPI )
    fig.set_figwidth( iSize_x )
    fig.set_figheight( iSize_y )
              
    pAxGrid = ImageGrid(fig, 111,
            nrows_ncols=(4,1),
            axes_pad=0.6,    
            label_mode='')  # note the empty label_mode
    
    pYear = mdates.YearLocator(1)   # every year
    pMonth = mdates.MonthLocator()  # every month
    if sDate_type_in is not None:
        if sDate_type_in == 'month':
            pMonth = mdates.MonthLocator(3)
        else:
            print(sDate_type_in)
    else:
        print(sDate_type_in)
        pass
    if sFormat_y_in is not None:
        iFlag_format_y = 1
        sFormat_y = sFormat_y_in
    else:
        iFlag_format_y = 0

    sYear_format = mdates.DateFormatter('%Y')

    aData2 = pd.Series(aData, index=pd.date_range('1-1-2000', periods=len(aData), freq='M'), name = 'WTD')

    stl = STL(aData2, seasonal=13)
    res = stl.fit()
    fig = res.plot()
       

    

    #save the result
    #plt.show()
    plt.savefig(sFilename_out, bbox_inches='tight')

    plt.close('all')
    plt.clf()
    #print('finished plotting')
